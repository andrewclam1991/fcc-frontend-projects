{"version":3,"sources":["app/hooks.ts","features/quote/quoteSlice.ts","features/quote/quoteAPI.ts","features/quote/Quote.tsx","App.tsx","features/counter/counterAPI.ts","features/counter/counterSlice.ts","app/store.ts","serviceWorker.ts","index.tsx"],"names":["useAppSelector","useSelector","getRandomQuote","createAsyncThunk","a","axios","get","then","response","data","quotes","randomIndex","Math","floor","random","length","quoteSlice","createSlice","name","initialState","quote","author","tweetQuote","status","reducers","extraReducers","builder","addCase","rejected","state","pending","fulfilled","action","payload","encodeURIComponent","Quote","dispatch","useDispatch","useEffect","Jumbotron","fluid","id","Container","Row","Col","className","icon","faQuoteLeft","href","target","rel","faTwitterSquare","Button","variant","onClick","App","fetchCount","amount","Promise","resolve","setTimeout","incrementAsync","counterSlice","value","increment","decrement","incrementByAmount","actions","store","configureStore","reducer","quoteReducer","counter","counterReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fbe0dba4.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\"\nimport type { RootState } from \"../../app/store\";\nimport { fetchQuotes } from \"./quoteAPI\";\ninterface QuoteState {\n  quote: string;\n  author: string;\n  tweetQuote: string;\n  status: \"idle\" | \"loading\" | \"failed\";\n};\n\nconst initialState: QuoteState = {\n  quote: \"\",\n  author: \"\",\n  tweetQuote: \"\",\n  status: \"idle\",\n};\n\nexport const getRandomQuote = createAsyncThunk(\n  \"quote/getRandomQuote\",\n  async () => {\n    const quotes = await fetchQuotes();\n    const randomIndex = Math.floor(Math.random() * quotes.length);\n    return quotes[randomIndex];\n  }\n);\n\nexport const quoteSlice = createSlice({\n  name: \"quote\",\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(getRandomQuote.rejected, (state) => {\n        state.status = \"failed\";\n      })\n      .addCase(getRandomQuote.pending, (state) => {\n        state.status = \"loading\";\n      })\n      .addCase(getRandomQuote.fulfilled, (state, action) => {\n        state.status = \"idle\";\n        state.quote = action.payload.quote;\n        state.author = action.payload.author;\n        state.tweetQuote = `https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text=${encodeURIComponent(`\"${state.quote}\"- ${state.author}`)}`;\n      });\n  },\n});\n\nexport const selectText = (state: RootState) => state.quote.quote;\nexport const selectAuthor = (state: RootState) => state.quote.author;\n\nexport default quoteSlice.reducer;","import axios from 'axios';\nexport interface Quote {\n  quote: string,\n  author: string,\n}\nexport interface fetchQuotesResponse {\n  quotes: Quote[];\n}\n\nconst fetchQuotesUrl = `https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json`;\n\nexport function fetchQuotes() {\n  return axios.get<fetchQuotesResponse>(fetchQuotesUrl)\n    .then((response) => response.data)\n    .then((data) => data.quotes);\n}","import { useEffect } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Button from 'react-bootstrap/Button';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faQuoteLeft } from '@fortawesome/free-solid-svg-icons'\nimport { faTwitterSquare } from '@fortawesome/free-brands-svg-icons';\nimport styles from './Quote.module.css';\nimport { useAppSelector, useAppDispatch } from '../../app/hooks';\nimport { getRandomQuote } from './quoteSlice';\n\nexport function Quote() {\n  const quote = useAppSelector(state => state.quote);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    dispatch(getRandomQuote())\n  }, [dispatch])\n\n  return (\n    <Jumbotron fluid id=\"quote-box\">\n      <Container>\n        <Row>\n          <Col>\n            <h1\n              id=\"text\"\n              className=\"display-5\">\n              <FontAwesomeIcon icon={faQuoteLeft} />\n              &nbsp;\n              {quote.quote}\n            </h1>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <p\n              className=\"lead text-right\"\n              id=\"author\">\n              {quote.author}\n            </p>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <a\n              id=\"tweet-quote\"\n              href={quote.tweetQuote}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              className=\"display-4\">\n              <FontAwesomeIcon icon={faTwitterSquare} />\n            </a>\n          </Col>\n          <Col>\n            <p\n              className=\"lead text-right\">\n              <Button\n                variant=\"primary\"\n                id=\"new-quote\"\n                onClick={() => dispatch(getRandomQuote())}>\n                New Quote\n              </Button>\n            </p>\n          </Col>\n        </Row>\n      </Container>\n    </Jumbotron>\n  );\n}","import { Quote } from './features/quote/Quote';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Quote />\n  );\n}\n\nexport default App;\n","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise<{ data: number }>((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState, AppThunk } from '../../app/store';\nimport { fetchCount } from './counterAPI';\n\nexport interface CounterState {\n  value: number;\n  status: 'idle' | 'loading' | 'failed';\n}\n\nconst initialState: CounterState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount: number) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state: RootState) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount: number): AppThunk => (\n  dispatch,\n  getState\n) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\nimport quoteReducer from '../features/quote/quoteSlice';\n\nexport const store = configureStore({\n  reducer: {\n    quote: quoteReducer,\n    counter: counterReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}