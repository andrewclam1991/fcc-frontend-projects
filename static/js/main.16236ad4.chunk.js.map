{"version":3,"sources":["app/hooks.ts","features/quote/quoteSlice.ts","features/quote/quoteAPI.ts","features/quote/Quote.tsx","features/markdown/markdownService.ts","features/markdown/markdownSlice.ts","features/markdown/Editor.tsx","features/markdown/Preview.tsx","features/markdown/Markdown.tsx","App.tsx","features/counter/counterAPI.ts","features/counter/counterSlice.ts","app/store.ts","serviceWorker.ts","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","getRandomQuote","createAsyncThunk","a","axios","get","then","response","data","quotes","randomIndex","Math","floor","random","length","quoteSlice","createSlice","name","initialState","quote","author","tweetQuote","status","reducers","extraReducers","builder","addCase","rejected","state","pending","fulfilled","action","payload","encodeURIComponent","Quote","dispatch","useEffect","Jumbotron","fluid","id","Container","Row","Col","className","icon","faQuoteLeft","href","target","rel","faTwitterSquare","Button","variant","onClick","parseMarkdown","input","marked","setOptions","gfm","breaks","sanitizeHtml","allowedTags","defaults","concat","markdownSlice","output","setInput","getOuput","actions","MarkdownEditor","markdown","Form","Group","Label","Control","as","rows","value","onChange","event","MarkdownPreview","Card","Body","dangerouslySetInnerHTML","__html","Markdown","xs","md","lg","App","to","path","component","fetchCount","amount","Promise","resolve","setTimeout","incrementAsync","counterSlice","increment","decrement","incrementByAmount","store","configureStore","reducer","quoteReducer","counter","counterReducer","markdownReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.16236ad4.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\"\nimport type { RootState } from \"../../app/store\";\nimport { fetchQuotes } from \"./quoteAPI\";\ninterface QuoteState {\n  quote: string;\n  author: string;\n  tweetQuote: string;\n  status: \"idle\" | \"loading\" | \"failed\";\n};\n\nconst initialState: QuoteState = {\n  quote: \"\",\n  author: \"\",\n  tweetQuote: \"\",\n  status: \"idle\",\n};\n\nexport const getRandomQuote = createAsyncThunk(\n  \"quote/getRandomQuote\",\n  async () => {\n    const quotes = await fetchQuotes();\n    const randomIndex = Math.floor(Math.random() * quotes.length);\n    return quotes[randomIndex];\n  }\n);\n\nexport const quoteSlice = createSlice({\n  name: \"quote\",\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(getRandomQuote.rejected, (state) => {\n        state.status = \"failed\";\n        state.quote = \"\";\n        state.author = \"\";\n        state.tweetQuote = \"\";\n      })\n      .addCase(getRandomQuote.pending, (state) => {\n        state.status = \"loading\";\n      })\n      .addCase(getRandomQuote.fulfilled, (state, action) => {\n        state.status = \"idle\";\n        state.quote = action.payload.quote;\n        state.author = action.payload.author;\n        state.tweetQuote = `https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text=${encodeURIComponent(`\"${state.quote}\"- ${state.author}`)}`;\n      });\n  },\n});\n\nexport const selectText = (state: RootState) => state.quote.quote;\nexport const selectAuthor = (state: RootState) => state.quote.author;\n\nexport default quoteSlice.reducer;","import axios from 'axios';\nexport interface Quote {\n  quote: string,\n  author: string,\n}\nexport interface fetchQuotesResponse {\n  quotes: Quote[];\n}\n\nconst fetchQuotesUrl = `https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json`;\n\nexport function fetchQuotes() {\n  return axios.get<fetchQuotesResponse>(fetchQuotesUrl)\n    .then((response) => response.data)\n    .then((data) => data.quotes);\n}","import { useEffect } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Button from 'react-bootstrap/Button';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faQuoteLeft } from '@fortawesome/free-solid-svg-icons'\nimport { faTwitterSquare } from '@fortawesome/free-brands-svg-icons';\nimport { useAppSelector, useAppDispatch } from '../../app/hooks';\nimport { getRandomQuote } from './quoteSlice';\n\nexport function Quote() {\n  const quote = useAppSelector(state => state.quote);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    dispatch(getRandomQuote())\n  }, [dispatch])\n\n  return (\n    <Jumbotron fluid id=\"quote-box\">\n      <Container>\n        <Row>\n          <Col>\n            <h1\n              id=\"text\"\n              className=\"display-5\">\n              <FontAwesomeIcon icon={faQuoteLeft} />\n              &nbsp;\n              {quote.quote}\n            </h1>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <p\n              className=\"lead text-right\"\n              id=\"author\">\n              {quote.author}\n            </p>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <a\n              id=\"tweet-quote\"\n              href={quote.tweetQuote}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              className=\"display-4\">\n              <FontAwesomeIcon icon={faTwitterSquare} />\n            </a>\n          </Col>\n          <Col>\n            <p\n              className=\"lead text-right\">\n              <Button\n                variant=\"primary\"\n                id=\"new-quote\"\n                onClick={() => dispatch(getRandomQuote())}>\n                New Quote\n              </Button>\n            </p>\n          </Col>\n        </Row>\n      </Container>\n    </Jumbotron>\n  );\n}","import marked from \"marked\";\nimport sanitizeHtml from \"sanitize-html\";\n\n/**\n * Responsible for parsing input githum flavored markdown\n * to sanitized html\n * @param input github flavored markdown (gfm), could be dirty\n * @returns sanitized html\n */\nexport const parseMarkdown = (input: string) => {\n  marked.setOptions({\n    gfm: true,\n    breaks: true,\n  });\n  return sanitizeHtml(marked(input), {\n    allowedTags: sanitizeHtml.defaults.allowedTags.concat([\"img\"]),\n  });\n};\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport type { RootState } from \"../../app/store\";\nimport { parseMarkdown } from \"../markdown/markdownService\";\n\ninterface MarkdownState {\n  input: string;\n  output: string;\n}\n\nconst initialState: MarkdownState = {\n  input: `# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n\nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n\nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.com), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | -------------\nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbererd lists too.\n1. Use just 1s if you want!\n1. And last but not least, let's not forget embedded images:\n\n![React Logo w/ Text](https://goo.gl/Umyytc)\n`,\n  output: \"\",\n};\n\nexport const markdownSlice = createSlice({\n  name: \"markdown\",\n  initialState,\n  reducers: {\n    setInput: (state, action: PayloadAction<string>) => {\n      state.input = action.payload;\n      state.output = parseMarkdown(state.input);\n    },\n    getOuput: (state) => {\n      state.output = parseMarkdown(state.input);\n    }\n  },\n});\n\nexport const { setInput, getOuput } = markdownSlice.actions;\n\nexport const selectInput = (state: RootState) => state.markdown.input;\nexport const selectOutput = (state: RootState) => state.markdown.output;\n\nexport default markdownSlice.reducer;","import { Form } from \"react-bootstrap\"\nimport { useAppSelector, useAppDispatch } from \"../../app/hooks\";\nimport { setInput } from \"./markdownSlice\";\n\nexport const MarkdownEditor = () => {\n  const input = useAppSelector(state => state.markdown.input);\n  const dispatch = useAppDispatch();\n  \n  return <>\n    <Form>\n      <Form.Group>\n        <Form.Label>Editor</Form.Label>\n        <Form.Control\n          id=\"editor\"\n          as=\"textarea\"\n          rows={5}\n          value={input}\n          onChange={event => {\n            dispatch(setInput(event.target.value))\n          }}\n        />\n      </Form.Group>\n    </Form>\n  </>\n}","import { useEffect } from \"react\";\nimport { Card, Form } from \"react-bootstrap\";\nimport { useAppDispatch, useAppSelector } from \"../../app/hooks\";\nimport { getOuput } from \"./markdownSlice\";\n\nexport const MarkdownPreview = () => {\n  const output = useAppSelector(state => state.markdown.output);\n  const dispatch = useAppDispatch();\n  \n  useEffect(() => {\n    dispatch(getOuput())\n  }, [dispatch])\n\n  return <>\n    <Form>\n      <Form.Group>\n        <Form.Label>Previewer</Form.Label>\n        <Card>\n          <Card.Body>\n            <div\n              id='preview'\n              dangerouslySetInnerHTML={{\n                __html: output\n              }}\n            />\n          </Card.Body>\n        </Card>\n      </Form.Group>\n    </Form>\n  </>\n}","import { Container, Row, Col } from \"react-bootstrap\";\nimport { MarkdownEditor } from \"./Editor\";\nimport { MarkdownPreview } from \"./Preview\";\n\nexport function Markdown() {\n  return (\n    <Container fluid>\n      <Row>\n        <Col xs={12} md={6} lg={6}>\n          <MarkdownEditor />\n        </Col>\n        <Col xs={12} md={6} lg={6}>\n          <MarkdownPreview />\n        </Col>\n      </Row>\n    </Container>\n  );\n}","import {\n  HashRouter,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport { Quote } from './features/quote/Quote';\nimport { Markdown } from './features/markdown/Markdown';\n\nexport default function App() {\n  return (\n    <HashRouter>\n      <div>\n        <nav>\n          <ul>\n            <li>\n              <Link to=\"/random-quote-generator\">Random Quote Generator</Link>\n            </li>\n            <li>\n              <Link to=\"/markdown-previewer\">Markdown Previewer</Link>\n            </li>\n          </ul>\n        </nav>\n      </div>\n\n      <Switch>\n        <Route path=\"/random-quote-generator\" component={Quote}/>\n        <Route path=\"/markdown-previewer\" component={Markdown} />\n        <Route path=\"/\" component={Quote} />\n      </Switch>\n    </HashRouter>\n  );\n}\n","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise<{ data: number }>((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState, AppThunk } from '../../app/store';\nimport { fetchCount } from './counterAPI';\n\nexport interface CounterState {\n  value: number;\n  status: 'idle' | 'loading' | 'failed';\n}\n\nconst initialState: CounterState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount: number) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state: RootState) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount: number): AppThunk => (\n  dispatch,\n  getState\n) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\nimport quoteReducer from '../features/quote/quoteSlice';\nimport markdownReducer from '../features/markdown/markdownSlice';\n\nexport const store = configureStore({\n  reducer: {\n    quote: quoteReducer,\n    counter: counterReducer,\n    markdown: markdownReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}